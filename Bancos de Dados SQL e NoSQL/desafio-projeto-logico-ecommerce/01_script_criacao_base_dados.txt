-- -----------------------------------------------------
-- Schema e_commerce
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `e_commerce` DEFAULT CHARACTER SET utf8mb4 ;
USE `e_commerce` ;

-- -----------------------------------------------------
-- Table `e_commerce`.`Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Fornecedor` (
  `idFornecedor` INT NOT NULL AUTO_INCREMENT,
  `CNPJ` CHAR(20) NOT NULL COMMENT 'Utilizado tamanho 20 para permitir armazenar o CNPJ formatado',
  PRIMARY KEY (`idFornecedor`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `CNPJ_UNIQUE` ON `e_commerce`.`Fornecedor` (`CNPJ` ASC) INVISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Produto` (
  `idProduto` INT NOT NULL AUTO_INCREMENT,
  `Descricao` VARCHAR(45) NOT NULL,
  `valor_unitario` FLOAT NOT NULL,
  `Categoria` ENUM('Eletrônico', 'Vestimenta', 'Brinquedos', 'Alimentos', 'Móveis') NULL,
  `Avaliacao` FLOAT NULL DEFAULT 0,
  `Size` VARCHAR(10) NULL,
  PRIMARY KEY (`idProduto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `e_commerce`.`Fornecedor_Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Fornecedor_Produto` (
  `idFornecedor` INT NOT NULL,
  `idProduto` INT NOT NULL,
  `Quantidade` INT NOT NULL DEFAULT 0 COMMENT 'Quantidade do produto disponibilizada pelo fornecedor',
  PRIMARY KEY (`idFornecedor`, `idProduto`),
  CONSTRAINT `fk_Fornecedor_Produto_Fornecedor`
    FOREIGN KEY (`idFornecedor`)
    REFERENCES `e_commerce`.`Fornecedor` (`idFornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Fornecedor_Produto_Produto`
    FOREIGN KEY (`idProduto`)
    REFERENCES `e_commerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Fornecedor_Produto_Produto_idx` ON `e_commerce`.`Fornecedor_Produto` (`idProduto` ASC) INVISIBLE;

CREATE INDEX `fk_Fornecedor_Produto_Fornecedor_idx` ON `e_commerce`.`Fornecedor_Produto` (`idFornecedor` ASC) INVISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Estoque` (
  `idEstoque` INT NOT NULL AUTO_INCREMENT,
  `Local` VARCHAR(45) NULL,
  PRIMARY KEY (`idEstoque`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `e_commerce`.`Produto_Estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Produto_Estoque` (
  `idProduto` INT NOT NULL,
  `idEstoque` INT NOT NULL,
  `Quantidade` INT NOT NULL DEFAULT 0,
  `Qtd_reservada` INT NOT NULL DEFAULT 0 COMMENT 'Antes que o pedido seja fechado (gravado) a quantidade será somada a esse campo para evitar a compra fora da quantidade possível',
  PRIMARY KEY (`idProduto`, `idEstoque`),
  CONSTRAINT `fk_Produto_Estoque_Produto`
    FOREIGN KEY (`idProduto`)
    REFERENCES `e_commerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_Estoque_Estoque`
    FOREIGN KEY (`idEstoque`)
    REFERENCES `e_commerce`.`Estoque` (`idEstoque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Produto_Estoque_Estoque_idx` ON `e_commerce`.`Produto_Estoque` (`idEstoque` ASC) INVISIBLE;

CREATE INDEX `fk_Produto_Estoque_Produto_idx` ON `e_commerce`.`Produto_Estoque` (`idProduto` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Vendedor` (
  `idVendedor` INT NOT NULL AUTO_INCREMENT,
  `Tipo_pessoa` ENUM('Jurídica', 'Física') NOT NULL COMMENT 'Esse campo indicará o valor armazenado no atributo Identificação (CNPJ, CPF)',
  `Identificacao` CHAR(20) NOT NULL,
  PRIMARY KEY (`idVendedor`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `Identificacao_UNIQUE` ON `e_commerce`.`Vendedor` (`Identificacao` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Produtos_Vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Produtos_Vendedor` (
  `idVendedor` INT NOT NULL,
  `idProduto` INT NOT NULL,
  `Quantidade` INT NULL DEFAULT 0 COMMENT 'Quantidade produto disponibilizada pelo vendedor terceiro',
  PRIMARY KEY (`idVendedor`, `idProduto`),
  CONSTRAINT `fk_Produtos_Vendedor_Vendedor`
    FOREIGN KEY (`idVendedor`)
    REFERENCES `e_commerce`.`Vendedor` (`idVendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produtos_Vendedor_Produto`
    FOREIGN KEY (`idProduto`)
    REFERENCES `e_commerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Produtos_Vendedor_Produto_idx` ON `e_commerce`.`Produtos_Vendedor` (`idProduto` ASC) VISIBLE;

CREATE INDEX `fk_Produtos_Vendedor_Vendedor_idx` ON `e_commerce`.`Produtos_Vendedor` (`idVendedor` ASC) INVISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Cidade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Cidade` (
  `idCidade` INT NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(100) NOT NULL,
  `UF` ENUM('AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO') NOT NULL,
  PRIMARY KEY (`idCidade`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `e_commerce`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Cliente` (
  `idCliente` INT NOT NULL AUTO_INCREMENT,
  `PNome` VARCHAR(10) NOT NULL COMMENT 'Primeiro nome',
  `MInit` VARCHAR(3) NULL COMMENT 'Inicial nome do meio (de, do, etc.)',
  `Sobrenome` VARCHAR(20) NULL COMMENT 'Adicionar constraint de unicidade para nome completo\nunique(Pnome, nMeioInicial, Sobrenome)',
  `tipo_pessoa` ENUM('Jurídica', 'Física') NOT NULL COMMENT 'Física, Jurídica',
  `identificacao` CHAR(20) NOT NULL COMMENT 'CPF ou CNPJ do cliente de acordo com o tipo pessoa',
  `endereco` VARCHAR(100) NOT NULL,
  `cep` VARCHAR(20) NOT NULL,
  `idCidade` INT NOT NULL,
  `email` VARCHAR(100) NULL,
  `codigo_pais` VARCHAR(3) NULL,
  `ddd_celular` VARCHAR(3) NULL,
  `celular` VARCHAR(20) NULL,
  `data_nascimento` DATE NOT NULL,
  PRIMARY KEY (`idCliente`),
  CONSTRAINT `fk_Cliente_Cidade'`
    FOREIGN KEY (`idCidade`)
    REFERENCES `e_commerce`.`Cidade` (`idCidade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `IDX_IDENTIFICACAO` ON `e_commerce`.`Cliente` (`identificacao` ASC) INVISIBLE;

CREATE INDEX `fk_Cliente_Cidade_idx` ON `e_commerce`.`Cliente` (`idCidade` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Pedido` (
  `idPedido` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `Data_cadastro` DATETIME NOT NULL,
  `Status_pedido` ENUM('Em andamento', 'Processando', 'Enviado', 'Entregue') NOT NULL DEFAULT 'Processando',
  `Endereco_Entrega` VARCHAR(100) NOT NULL,
  `Cep_Entrega` VARCHAR(20) NOT NULL,
  `idCidade` INT NOT NULL,
  `Codigo_Rastreio_Entrega` VARCHAR(45) NULL,
  `Status_Entrega` CHAR(1) NULL,
  `Data_Cancelamento` DATETIME NULL,
  `Motivo_Cancelamento` VARCHAR(100) NULL,
  `Valor_frete` FLOAT NULL DEFAULT 10,
  PRIMARY KEY (`idPedido`),
  CONSTRAINT `fk_Pedido_Cliente`
    FOREIGN KEY (`idCliente`)
    REFERENCES `e_commerce`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_Cidade1`
    FOREIGN KEY (`idCidade`)
    REFERENCES `e_commerce`.`Cidade` (`idCidade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Pedido_Cliente_idx` ON `e_commerce`.`Pedido` (`idCliente` ASC) VISIBLE;

CREATE INDEX `fk_Pedido_Cidade1_idx` ON `e_commerce`.`Pedido` (`idCidade` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Produto_Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Produto_Pedido` (
  `idProduto` INT NOT NULL,
  `idPedido` INT NOT NULL,
  `Quantidade` INT NULL DEFAULT 1,
  `Valor_Venda` FLOAT NULL,
  `status_produto` ENUM('Disponível', 'Sem estoque') NULL,
  `idEstoque` INT NOT NULL COMMENT 'Indica de qual estoque o produto será baixado',
  PRIMARY KEY (`idProduto`, `idPedido`),
  CONSTRAINT `fk_Produto_Pedido_Produto`
    FOREIGN KEY (`idProduto`)
    REFERENCES `e_commerce`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_Pedido_Pedido`
    FOREIGN KEY (`idPedido`)
    REFERENCES `e_commerce`.`Pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_Pedido_Estoque1`
    FOREIGN KEY (`idEstoque`)
    REFERENCES `e_commerce`.`Estoque` (`idEstoque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Produto_Pedido_Pedido_idx` ON `e_commerce`.`Produto_Pedido` (`idPedido` ASC) VISIBLE;

CREATE INDEX `fk_Produto_Pedido_Produto_idx` ON `e_commerce`.`Produto_Pedido` (`idProduto` ASC) INVISIBLE;

CREATE INDEX `fk_Produto_Pedido_Estoque1_idx` ON `e_commerce`.`Produto_Pedido` (`idEstoque` ASC) VISIBLE;


-- cria trigger para atualizar quantidade reservada a cada inclusão de produto
DELIMITER $
CREATE TRIGGER tai_produto_pedido AFTER INSERT
ON Produto_Pedido
FOR EACH ROW
BEGIN
	UPDATE produto_estoque SET qtd_reservada = qtd_reservada + NEW.Quantidade
     WHERE idproduto = NEW.idproduto
       AND idestoque = NEW.idestoque;
END$

CREATE TRIGGER tad_produto_pedido AFTER DELETE
ON Produto_Pedido
FOR EACH ROW
BEGIN
	UPDATE produto_estoque SET qtd_reservada = qtd_reservada - OLD.Quantidade
     WHERE idproduto = OLD.idproduto
       AND idestoque = OLD.idestoque;
END$
DELIMITER ;
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `e_commerce`.`Pagamento_Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Pagamento_Pedido` (
  `idPagamento_Pedido` INT NOT NULL AUTO_INCREMENT,
  `idPedido` INT NOT NULL,
  `Forma_de_Pagamento` ENUM('Boleto', 'Cartão', 'Dinheiro') NOT NULL DEFAULT 'Cartão',
  `Status_pagamento` ENUM('Pendente', 'Confirmado', 'Rejeitado') NULL DEFAULT 'Pendente' COMMENT 'Pendente - aguardando confirmação operadora cartão ou banco\nConfirmado - pagamento confirmado com sucesso\nRejeitado - erro na autorização do pagamento',
  `Valor_pagamento` FLOAT NOT NULL,
  `Nro_cartao` VARCHAR(45) NULL,
  `Nome_Titular_cartao` VARCHAR(45) NULL,
  `Data_validade_cartao` DATETIME NULL,
  `Numero_autorizacao_cartao` VARCHAR(45) NULL,
  `Motivo_rejeicao_cartao` VARCHAR(250) NULL,
  `Numero_boleto` VARCHAR(45) NULL,
  PRIMARY KEY (`idPagamento_Pedido`),
  CONSTRAINT `fk_Pagamento_Pedido_Pedido`
    FOREIGN KEY (`idPedido`)
    REFERENCES `e_commerce`.`Pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Pagamento_Pedido_Pedido_idx` ON `e_commerce`.`Pagamento_Pedido` (`idPedido` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `e_commerce`.`Dados_Fornec_Vend`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `e_commerce`.`Dados_Fornec_Vend` (
  `idDados_Fornec_Vend` INT NOT NULL AUTO_INCREMENT,
  `Razao_social` VARCHAR(100) NOT NULL,
  `Nome_fantasia` VARCHAR(45) NULL,
  `Endereco` VARCHAR(200) NOT NULL,
  `Cep` VARCHAR(20) NOT NULL,
  `idCidade` INT NOT NULL,
  `Contato` VARCHAR(45) NULL,
  `idFornecedor` INT NULL COMMENT 'É utilizado um relacionamento 1:n porque o mesmo Fornecedor pode possuir mais de uma filial',
  `idVendedor` INT NULL COMMENT 'É utilizado um relacionamento 1:n porque o mesmo Vendedor pode possuir mais de uma filial',
  PRIMARY KEY (`idDados_Fornec_Vend`),
  CONSTRAINT `fk_Dados_Fornec_Vend_Fornecedor`
    FOREIGN KEY (`idFornecedor`)
    REFERENCES `e_commerce`.`Fornecedor` (`idFornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Dados_Fornec_Vend_Vendedor`
    FOREIGN KEY (`idVendedor`)
    REFERENCES `e_commerce`.`Vendedor` (`idVendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Dados_Fornec_Vend_Cidade`
    FOREIGN KEY (`idCidade`)
    REFERENCES `e_commerce`.`Cidade` (`idCidade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Dados_Fornec_Vend_Fornecedor_idx` ON `e_commerce`.`Dados_Fornec_Vend` (`idFornecedor` ASC) INVISIBLE;

CREATE INDEX `fk_Dados_Fornec_Vend_Vendedor_idx` ON `e_commerce`.`Dados_Fornec_Vend` (`idVendedor` ASC) VISIBLE;

CREATE INDEX `fk_Dados_Fornec_Vend_Cidade_idx` ON `e_commerce`.`Dados_Fornec_Vend` (`idCidade` ASC) VISIBLE;